{
  "properties": [
    {
      "name": "spring.datasource.maximum-pool-size",
      "type": "java.lang.Integer",
      "description": "Maximum number of threads available that allow for safe isolation of the blocking operations."
    },
    {
      "name": "jwt.lifetime",
      "type": "java.lang.Integer",
      "description": "Access token lifetime (in seconds)."
    },
    {
      "name": "exception.security.incorrect-credentials",
      "type": "java.lang.String",
      "description": "Error code for an exception which is thrown if login or password is incorrect."
    },
    {
      "name": "exception.users.user-not-found",
      "type": "java.lang.String",
      "description": "Error code for an exception which is thrown if a user doesn't exist."
    },
    {
      "name": "exception.users.user-login-already-exists",
      "type": "java.lang.String",
      "description": "Error code for an exception which is thrown if someone is trying to add a user with already taken login."
    },
    {
      "name": "jwt.private-key-file-name",
      "type": "java.lang.String",
      "description": "The name of the file that contains the private key for jwt encryption."
    },
    {
      "name": "jwt.private-key-file-path",
      "type": "java.lang.String",
      "description": "The path to the file that contains the private key for jwt encryption."
    },
    {
      "name": "exception.internal.monkeys-ran-out-of-bananas",
      "type": "java.lang.String",
      "description": "Error code when something unexpected happen on backend."
    },
    {
      "name": "exception.delegations.invalid-since-and-until-parameter",
      "type": "java.lang.String",
      "description": "Error code for an exception which is thrown if since date is after until date."
    },
    {
      "name": "cors.origin",
      "type": "java.lang.String",
      "description": "Allowed cors for production."
    },
    {
      "name": "exception.delegations.delegation-not-found",
      "type": "java.lang.String",
      "description": "Error code for an exception which is thrown if a delegation doesn't exist."
    },
    {
      "name": "exception.forbidden.role-has-no-access-to-resource",
      "type": "java.lang.String",
      "description": "Error code for an exception which is thrown if user with role hasn't got access to resource."
	},
	{
      "name": "exception.checklists.checklist-not-found",
      "type": "java.lang.String",
      "description": "Error code for an exception which is thrown if a checklist doesn't exist."
    }
  ]
}

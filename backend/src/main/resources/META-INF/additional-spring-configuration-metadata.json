{
  "properties": [
    {
      "name": "spring.datasource.maximum-pool-size",
      "type": "java.lang.Integer",
      "description": "Maximum number of threads available that allow for safe isolation of the blocking operations."
    },
    {
      "name": "jwt.lifetime",
      "type": "java.lang.Integer",
      "description": "Access token lifetime (in seconds)."
    },
    {
      "name": "exception.security.incorrect-credentials",
      "type": "java.lang.String",
      "description": "Error code for an exception which is thrown if login or password is incorrect."
    },
    {
      "name": "exception.users.user-not-found",
      "type": "java.lang.String",
      "description": "Error code for an exception which is thrown if a user doesn't exist."
    },
    {
      "name": "exception.users.user-login-already-exists",
      "type": "java.lang.String",
      "description": "Error code for an exception which is thrown if someone is trying to add a user with already taken login."
    },
    {
      "name": "jwt.private-key-file-name",
      "type": "java.lang.String",
      "description": "The name of the file that contains the private key for jwt encryption."
    },
    {
      "name": "jwt.private-key-file-path",
      "type": "java.lang.String",
      "description": "The path to the file that contains the private key for jwt encryption."
    },
    {
      "name": "exception.internal.monkeys-ran-out-of-bananas",
      "type": "java.lang.String",
      "description": "Error code when something unexpected happen on backend."
    },
    {
      "name": "exception.delegations.invalid-since-and-until-parameter",
      "type": "java.lang.String",
      "description": "Error code for an exception which is thrown if since date is after until date."
    },
    {
      "name": "cors.origin",
      "type": "java.lang.String",
      "description": "Allowed cors for production."
    },
    {
      "name": "exception.delegations.delegation-not-found",
      "type": "java.lang.String",
      "description": "Error code for an exception which is thrown if a delegation doesn't exist."
    },
    {
      "name": "exception.forbidden.role-has-no-access-to-resource",
      "type": "java.lang.String",
      "description": "Error code for an exception which is thrown if user with role hasn't got access to resource."
    },
    {
      "name": "files.base-path",
      "type": "java.lang.String",
      "description": "Base path where all uploaded images will be stored."
    },
    {
      "name": "exception.files.could-not-save-file",
      "type": "java.lang.String",
      "description": "Error code for an exception which is thrown if could not save file."
    },
    {
      "name": "exception.forbidden.not-owner-of-resource",
      "type": "java.lang.String",
      "description": "Error code for an exception which is thrown if user is not owner of resource."
    },
    {
      "name": "exception.delegations.no-expenses",
      "type": "java.lang.String",
      "description": "Error code for an exception which is thrown if delegation has no expenses."
    },
    {
      "name": "exception.data.data-has-changed",
      "type": "java.lang.String",
      "description": "Error code if Optimistic Lock Exception occurred."
    },
    {
      "name": "exception.checklists.checklist-not-found",
      "type": "java.lang.String",
      "description": "Error code for an exception which is thrown if a checklist doesn't exist."
    },
    {
      "name": "exception.expenses.expense-not-found",
      "type": "java.lang.String",
      "description": "Error code if expense was not found."
    },
    {
      "name": "exception.files.file-not-found",
      "type": "java.lang.String",
      "description": "Error code if file was not found."
    },
    {
      "name": "exception.countries.country-not-found",
      "type": "java.lang.String",
      "description": "Error code if country was not found."
    },
    {
      "name": "exception.maximum-number-of-meals-exceeded",
      "type": "java.lang.String",
      "description": "Error code for an exception which is thrown if maximum number of meals has been exceeded."
    },
    {
      "name": "clients.api.nbp.url",
      "type": "java.lang.String",
      "description": "Base url for NBP api."
    },
    {
      "name": "retry.policy.exponential.max-retries",
      "type": "java.lang.Integer",
      "description": "Number indicating max retry requests to NBP api."
    },
    {
      "name": "cache.expiration-days",
      "type": "java.lang.Integer",
      "description": "Number indicating how long cache is unexpired."
    },
    {
      "name": "cache.clear-expired-cron",
      "type": "java.lang.String",
      "description": "Cron declaring frequency of clearing NBP api responses cache."
    },
    {
      "name": "clients.api.nbp.exchange-uri",
      "type": "java.lang.String",
      "description": "Number indicating uri to exchange rates."
    },
    {
      "name": "clients.services.nbp.max-days-back",
      "type": "java.lang.Integer",
      "description": "Number indicating max days back to get exchanges."
    },
    {
      "name": "retry.policy.exponential.initial-backoff",
      "type": "java.lang.Long",
      "description": "Number indicating starting backoff value."
    },
    {
      "name": "retry.policy.exponential.max-backoff",
      "type": "java.lang.String",
      "description": "Number indicating maximum backoff value."
    }
  ]
}
